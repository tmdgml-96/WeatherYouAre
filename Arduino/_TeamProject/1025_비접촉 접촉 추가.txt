#include <FirebaseESP8266.h>
#include <ESP8266WiFi.h>

#include "TimeLib.h"
#include "DHT.h"
#include "SDS011.h"

#define WIFI_SSID "Hanbat_WLAN_Guest"
#define WIFI_PASSWORD ""

#define FIREBASE_HOST "aadeeee-ccabe.firebaseio.com"
#define FIREBASE_AUTH "jZBkOQrSpWCEZQWa75qOeqGaaCppU2kJqTNh7bS6"

#define FIREBASE_FCM_SERVER_KEY "AAAAq8kiUiM:APA91bGsydC-Ow-XX71hb3DbELiUWn6Uhsc38piaBFg3UmduIkKENSjkdIqLzLGG_XUFzs8QDiWhrk5RaOtOGmu4BbqjDmxZ0Z5uBMO4HcX5TONRYk2QNo-8taUYm3ny5LFI7xInkD0h"

#define DHTPIN 12 // D6
#define DHTTYPE DHT22

FirebaseData firebaseData;
FirebaseJson json;

DHT dht(DHTPIN, DHTTYPE);
SDS011 my_sds;

// date
unsigned long lastTime = 0;
int timezone = 3;
int number = 0;
int mtemp = 0, stemp = 0, monTemp = 0, dTemp = 0, htemp = 0;
String mi, se, mon, da;
String date, DateSecond, FcmDate;

String DayReverse(int &tempDay);

// SDS011
float p10, p25;

// DHT
float h, tp = 0.0;
int dst = 0;

void dhtRead();

// UV
int UVsensorIn = A0; //Output from the sensor
int uvLevel;
float outputVoltage;
float uvIntensity;

// Rain
float rainCheck;

float Liquid_level1;
float Liquid_level2;
float Liquid_level3;
float Liquid_level4;

// firebase upload path
String path = "/sensorA";
String TokenPath = "/userToken";

// Get User Token
String UserToken;

// User imformation get
int UserInt1, UserInt2;
String UserValue1, UserValue2;
String UserChoice1, UserChoice2, UserCheckSensor1, UserCheckSensor2; // UserChoice = 이상/이하 &  UserCheckSensor = 센서명
String userEmail;

char cTempData1[3], cTempData2[3];

// Date Setting count
int Dcnt = 0;

void FcmSendMessageCheck();

void setup()
{

  Serial.begin(9600);

  my_sds.begin(2, 6); // D4 + 3v + GND
  dht.begin();

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  Firebase.reconnectWiFi(true);

  firebaseData.setBSSLBufferSize(1024, 1024);
  firebaseData.setResponseSize(1024);

  UserToken = GetToken(TokenPath);
  Serial.print("Token : ");
  Serial.println(UserToken);

  firebaseData.fcm.begin(FIREBASE_FCM_SERVER_KEY);
  firebaseData.fcm.addDeviceToken(UserToken);
  firebaseData.fcm.setPriority("high");
  firebaseData.fcm.setTimeToLive(1000);

  configTime(9 * 3600, 0, "pool.ntp.org", "time.nist.gov");
  Serial.println("\nWaiting for time");
  while (!time(nullptr))
  {
    Serial.print(".");
    delay(1000);
  }
  Serial.println("");

  FcmSendMessageCheck();
}


void loop()
{
  dhtRead();
  my_sds.read(&p25, &p10);

  uvLevel = averageAnalogRead(UVsensorIn);
  outputVoltage = 3.3 * uvLevel / 1024;
  uvIntensity = mapfloat(outputVoltage, 0.99, 2.9, 0.0, 15.0);

  // time Setting ------------------------
  time_t t = time(nullptr);

  mtemp = minute(t);
  mi = DayReverse(mtemp);

  stemp = second(t);
  se = DayReverse(stemp);

  monTemp = month(t);
  mon = DayReverse(monTemp);

  dTemp = day(t);
  da = DayReverse(dTemp);

  htemp = hour(t);

  DateSecond = String(year(t)) + "-" + mon + "-" + da + " " + hour(t) + ":" + minute(t) + ":" + second(t);
  date = String(year(t)) + "-" + mon + "-" + da + " " + hour(t) + ":" + mi + ":" + se;
  FcmDate = String(hour(t)) + "시 " + mi + "분";

  // Rain Check
  if (Firebase.getFloat(firebaseData,  path + "/rain_check/rainCheck"))
  {
    if (firebaseData.dataType() == "flaot")
      rainCheck = (firebaseData.floatData());
  }
  Serial.print(" Rain Check : ");
  Serial.println(rainCheck);

  // 10분마다 데이터 업데이트  && mtemp % 10 == 0
  if (year(t) != 1970)
  {
    if (second(t) == 30 || second(t) == 31 || second(t) == 32 || second(t) == 33 ) {
      if (Firebase.setString(firebaseData, path + "/weather/" + date, date))
      {

        if (rainCheck >= 100) {
          Serial.println( "접촉 수위 센서 전류 100 이상" );
          Serial.println();

          Firebase.setFloat(firebaseData, path + "/weather/" + date + "/temperature", tp);
          Firebase.setFloat(firebaseData, path + "/weather/" + date + "/dust", p10);
          Firebase.setFloat(firebaseData, path + "/weather/" + date + "/uvIntensity", uvIntensity);

          if (Liquid_level1 > 0) {
            Serial.print("비접촉 Liquid_level = ");
            Serial.println(Liquid_level1, DEC);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/temperature", tp);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/dust", p10);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/uvIntensity", uvIntensity);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/rain", Liquid_level1);

          }
          else if (Liquid_level2 > 0) {
            Serial.print("비접촉 Liquid_level = ");
            Serial.println(Liquid_level2, DEC);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/temperature", tp);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/dust", p10);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/uvIntensity", uvIntensity);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/rain", Liquid_level2);

          }
          else if (Liquid_level3 > 0) {
            Serial.print("비접촉 Liquid_level = ");
            Serial.println(Liquid_level3, DEC);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/temperature", tp);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/dust", p10);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/uvIntensity", uvIntensity);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/rain", Liquid_level3);

          }
          else if (Liquid_level4 > 0) {
            Serial.print("비접촉 Liquid_level = ");
            Serial.println(Liquid_level4, DEC);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/temperature", tp);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/dust", p10);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/uvIntensity", uvIntensity);
            Firebase.setFloat(firebaseData, path + "/weather/" + date + "/rain", Liquid_level4);

          }

        } else {
          Serial.println( "Rain Check Value NULL" );
          Serial.println();

          Firebase.setFloat(firebaseData, path + "/weather/" + date + "/temperature", tp);
          Firebase.setFloat(firebaseData, path + "/weather/" + date + "/dust", p10);
          Firebase.setFloat(firebaseData, path + "/weather/" + date + "/uvIntensity", uvIntensity);
        }
      }
    }
  }

  // userEmail
  if (Firebase.getString(firebaseData, "/userEmail"))
  {
    if (firebaseData.dataType() == "string")
      userEmail = (firebaseData.stringData());
  }
  Serial.println();
  Serial.print("userEmail : ");
  Serial.print(userEmail);
  Serial.println();

  // user 설정 1번
  if (Firebase.getString(firebaseData, "/user/" + userEmail + "/1/센서 종류"))
  {

    if (firebaseData.dataType() == "string")
    {
      UserCheckSensor1 = (firebaseData.stringData());
    }
    Serial.print("UserCheckSensor 1 : ");
    Serial.print(UserCheckSensor1);
    Serial.println();

    // User check Value
    if (Firebase.getString(firebaseData, "/user/" + userEmail + "/1/측정 값"))
    {
      if (firebaseData.dataType() == "string")
        UserValue1 = (firebaseData.stringData());
    }
    Serial.print(" 1 - 유저 설정 값 : ");

    // Sting -> char -> int
    UserValue1.toCharArray(cTempData1, 3);
    UserInt1 = atoi(cTempData1);

    Serial.println(UserInt1);

    // User check Choice -> 이상/이하
    if (Firebase.getString(firebaseData, "/user/" + userEmail + "/1/비교 값"))
    {
      if (firebaseData.dataType() == "string")
        UserChoice1 = (firebaseData.stringData());
    }
    Serial.print(" 1 - 이상 / 이하 : ");
    Serial.print(UserChoice1);
    Serial.println();
  }

  // user 설정 2번
  if (Firebase.getString(firebaseData, "/user/" + userEmail + "/2/센서 종류"))
  {

    if (firebaseData.dataType() == "string")
    {
      UserCheckSensor2 = (firebaseData.stringData());
    }
    Serial.print("UserCheckSensor 2 : ");
    Serial.print(UserCheckSensor2);
    Serial.println();

    // User check Value
    if (Firebase.getInt(firebaseData, "/user/" + userEmail + "/2/측정 값"))
    {
      if (firebaseData.dataType() == "int")
        UserInt2 = (firebaseData.intData());
    }
    Serial.print(" 2 - 유저 설정 값 : ");

    // Sting -> char -> int
    UserValue2.toCharArray(cTempData2, 3);
    UserInt2 = atoi(cTempData2);

    Serial.println(UserInt2);
    Serial.println();


    // User check Choice -> 이상/이하
    if (Firebase.getString(firebaseData, "/user/" + userEmail + "/2/비교 값"))
    {
      if (firebaseData.dataType() == "string")
        UserChoice2 = (firebaseData.stringData());
    }
    Serial.print(" 2 - 이상 / 이하 : ");
    Serial.print(UserChoice2);
    Serial.println();
  }
  Serial.println();


  Serial.println("*** Setting Time : 10 min ------------------------------------");
  Serial.println("*** Date Count : " + String(Dcnt));
  Serial.println(DateSecond);
  Serial.println();
  Serial.println("*** Humidity : " + String(h));
  Serial.println("*** Temperature : " + String(tp));
  Serial.println("*** P10 : " + String(p10));
  Serial.println("*** UV Intensity: " + String(uvIntensity) + " mW/cm^2");
  Serial.println();

  //FcmSendMessageCheck();

  Firebase.setFloat(firebaseData, path + "/location/latitude", 36.3509);
  Firebase.setFloat(firebaseData, path + "/location/longitude", 127.2990194);

  if (mtemp >= 0) {

    Dcnt++;

    if (Dcnt > 15) {
      Dcnt = 0;
    }

    delay(2000);

    if (year(t) != 1970)
    {
      if (UserCheckSensor1 != NULL) {
        FcmSendMessage( UserCheckSensor1,  UserChoice1, UserInt1 , tp, p10, uvIntensity, htemp, mtemp, Dcnt, 9, 00);
        FcmSendMessage( UserCheckSensor1,  UserChoice1, UserInt1 , tp, p10, uvIntensity, htemp, mtemp, Dcnt, 12, 00);
      }
      if (UserCheckSensor2 != NULL) {
        FcmSendMessage( UserCheckSensor2,  UserChoice2, UserInt2 , tp, p10, uvIntensity, htemp, mtemp, Dcnt, 9, 10);
        FcmSendMessage( UserCheckSensor2,  UserChoice2, UserInt2 , tp, p10, uvIntensity, htemp, mtemp, Dcnt, 12, 10);

      }
    }

    // 미세먼지 값에 따른 FCM 알림 설정
    if (year(t) != 1970 && htemp == 7 && mtemp == 0 && Dcnt == 3) {
      if (p10 <= 5)
      {
        firebaseData.fcm.setNotifyMessage(FcmDate, "현재 미세먼지는 지수는 '좋음'");
      }
      else if (p10 >= 31 && p10 <= 80)
      {
        firebaseData.fcm.setNotifyMessage( FcmDate, "현재 미세먼지는 지수는 '보통'");
      }
      else if (p10 >= 81 && p10 <= 150)
      {
        firebaseData.fcm.setNotifyMessage(  FcmDate, "현재 미세먼지는 지수는 '나쁨'");
      }
      else if (p10 >= 151)
      {
        firebaseData.fcm.setNotifyMessage( FcmDate, "현재 미세먼지는 지수는 '매우 나쁨'");
      }
    }

    //  자외선 값에 따른 FCM 알림 설정

    //  if (  year(t) != 1970 && htemp == 1 && mtemp == 30 && Dcnt == 3) {
    if (  year(t) != 1970 && htemp == 23 && Dcnt == 3) {

      if (uvIntensity <= 5.0 )
      {
        firebaseData.fcm.setNotifyMessage(FcmDate, "현재 자외선 지수는 '낮음'");
      }
      else if (uvIntensity >= 6.0 || uvIntensity <= 10.0 )
      {
        firebaseData.fcm.setNotifyMessage(FcmDate, "현재 자외선 지수는 '높음'");
      }
      else if (uvIntensity >= 11.0 )
      {
        firebaseData.fcm.setNotifyMessage(FcmDate, "현재 자외선 지수는 '위험'");
      }

      if (Firebase.sendMessage(firebaseData, 0))//send message to recipient index 0
      {

        Serial.println("PASSED");
        Serial.println(firebaseData.fcm.getSendResult());
        Serial.println("------------------------------------");
        Serial.println();
      }
      else
      {
        Serial.println("FAILED");
        Serial.println("REASON: " + firebaseData.errorReason());
        Serial.println("------------------------------------");
        Serial.println();
      }
    }
  } else {
    Serial.println();

    Serial.println("........ minute Setting");
    Serial.println();
  }
}

String DayReverse(int &tempDay)
{

  String resultTemp;

  if (tempDay >= 10)
  {
    resultTemp = String(tempDay);
  }
  else
  {
    resultTemp = "0" + String(tempDay);
  }

  return resultTemp;
}

void dhtRead()
{
  h = dht.readHumidity();
  tp = dht.readTemperature();

  if (isnan(h) || isnan(tp))
  {
    Serial.println("Failed to read DHT!");
    return;
  }
}

// Takes an average of readings on a given pin
// Returns the average
int averageAnalogRead(int pinToRead)
{
  byte numberOfReadings = 8;
  unsigned int runningValue = 0;

  for (int x = 0; x < numberOfReadings; x++)
    runningValue += analogRead(pinToRead);
  runningValue /= numberOfReadings;

  return (runningValue);
}

float mapfloat(float x, float in_min, float in_max, float out_min, float out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

String GetToken(String path)
{
  if (Firebase.getString(firebaseData, path))
  {
    if (firebaseData.dataType() == "string")
      UserToken = (firebaseData.stringData());
  }
  return (UserToken);
}


void FcmSendMessageCheck() {
  if (Firebase.sendMessage(firebaseData, 0))//send message to recipient index 0
  {

    Serial.println("PASSED");
    Serial.println(firebaseData.fcm.getSendResult());
    Serial.println("------------------------------------");
    Serial.println();
  }
  else
  {
    Serial.println("FAILED");
    Serial.println("REASON: " + firebaseData.errorReason());
    Serial.println("------------------------------------");
    Serial.println();
  }
}

void FcmSendMessage(String SensorName, String check, int value, int temp, int dust, float uv, int hour, int minute, int cnt, int Hvalue, int Mvalue) {

  if ( hour == Hvalue && minute == Mvalue && cnt == 3)

    if (SensorName == "온도" )
    {
      if (check == "이상" && temp >= value)
      {
        Serial.println("사용자 설정 값 : 온도 & 이상");
        Serial.println();
        FcmSendMessageCheck();
        firebaseData.fcm.setNotifyMessage(FcmDate, "현재 uvIntensity " + String(uvIntensity) + "입니다.");
      }
      else if (check == "이하" && temp <= value)
      {
        Serial.println("사용자 설정 값 : 온도 & 이하");
        Serial.println();
        FcmSendMessageCheck();
        firebaseData.fcm.setNotifyMessage( FcmDate, "현재 기온은 " + String(temp) + "입니다.");
      }
    }
    else if (SensorName == "미세먼지")
    {
      if (check == "이상" && dust >= value)
      {
        Serial.println("사용자 설정 값 : 미세먼지 & 이상");
        Serial.println();

        firebaseData.fcm.setNotifyMessage( FcmDate, "현재 미세먼지 지수는 " + String(dust) + "입니다.");
      }
      else if (check == "이하" && dust <= value)
      {
        Serial.println("사용자 설정 값 : 미세먼지 & 이하");
        Serial.println();

        firebaseData.fcm.setNotifyMessage( FcmDate, "현재 미세먼지 지수는 " + String(dust) + "입니다.");
      }
    }

    else  {
      Serial.println();
      Serial.println("User Sensor Setting is NULL");
      Serial.println();
    }

}